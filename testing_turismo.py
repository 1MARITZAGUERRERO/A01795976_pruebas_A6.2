# -*- coding: utf-8 -*-
"""testing_turismo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X3mvstOfbqvEADOX8uS9h8Amq8Y-Rhob
"""
import os
import sys
from unittest.mock import patch
from io import StringIO
import json

sys.path.append('/Users/Maritza/Downloads/')
from hoteles_reservas_py import Hotel, Cliente, Reserva, GestorHoteles

import unittest

class TestSistemaReservas(unittest.TestCase):
    def setUp(self):
        """ Configura archivos de prueba """
        self.hoteles_file = "test_hoteles.json"
        self.clientes_file = "test_clientes.json"
        self.reservas_file = "test_reservas.json"

        self.hoteles_data = [
            {"id_hotel": 11, "nombre": "Hotel A", "ubicacion": "Ciudad X", "habitaciones_disponibles": 5, "numero_estrellas": 4},
            {"id_hotel": 21, "nombre": "Hotel B", "ubicacion": "Ciudad Y", "habitaciones_disponibles": 10, "numero_estrellas": 3}
        ]
        self.clientes_data = [
            {"id_cliente": 11, "nombre": "Juan Perez", "email": "juan@gmail.com"}
        ]
        self.reservas_data = [
            {"id_reserva": 11, "id_cliente": 11, "id_hotel": 11}  # Cambié las ID de cliente y hotel para que coincidan con las de los datos de prueba
        ]

        # Guardar los datos en los archivos JSON
        with open(self.hoteles_file, "w", encoding="utf-8") as f:
            json.dump(self.hoteles_data, f)
        with open(self.clientes_file, "w", encoding="utf-8") as f:
            json.dump(self.clientes_data, f)
        with open(self.reservas_file, "w", encoding="utf-8") as f:
            json.dump(self.reservas_data, f)

        # Asignar los archivos de prueba a las clases
        Hotel.ARCHIVO = self.hoteles_file
        Cliente.ARCHIVO = self.clientes_file
        Reserva.ARCHIVO = self.reservas_file

    def tearDown(self):
        """ Elimina archivos de prueba """
        for file in [self.hoteles_file, self.clientes_file, self.reservas_file]:
            if os.path.exists(file):
                os.remove(file)

    def test_leer_archivo(self):
        """ Verifica lectura de archivo """
        data = GestorHoteles.leer_archivo(self.hoteles_file)
        self.assertEqual(len(data), 2)
        self.assertEqual(data[0]["nombre"], "Hotel A")

    def test_escribir_archivo(self):
        """ Verifica escritura de archivo """
        nuevo_hotel = {"id_hotel": 3, "nombre": "Hotel C", "ubicacion": "Ciudad Z", "habitaciones_disponibles": 8, "numero_estrellas": 5}
        GestorHoteles.escribir_archivo(self.hoteles_file, [nuevo_hotel])
        data = GestorHoteles.leer_archivo(self.hoteles_file)
        self.assertEqual(len(data), 1)
        self.assertEqual(data[0]["nombre"], "Hotel C")

    def test_crear_hotel(self):
        """ Verifica creación de un hotel """
        nuevo_hotel = {"id_hotel": 3, "nombre": "Hotel C", "ubicacion": "Ciudad Z", "habitaciones_disponibles": 8, "numero_estrellas": 5}
        Hotel.crear_hotel(nuevo_hotel)
        data = GestorHoteles.leer_archivo(self.hoteles_file)
        self.assertEqual(len(data), 3)
        self.assertEqual(data[-1]["nombre"], "Hotel C")

    def test_eliminar_hotel(self):
        """ Verifica eliminación de hotel """
        Hotel.eliminar_hotel(11)  # Ahora eliminamos el hotel con id 11
        data = GestorHoteles.leer_archivo(self.hoteles_file)
        self.assertEqual(len(data), 1)
        self.assertNotIn(11, [h["id_hotel"] for h in data])

    def test_crear_cliente(self):
        """ Verifica creación de cliente """
        Cliente.crear_cliente(2, "Maria Lopez", "maria@gmail.com")
        data = GestorHoteles.leer_archivo(self.clientes_file)
        self.assertEqual(len(data), 2)
        self.assertEqual(data[-1]["nombre"], "Maria Lopez")

    def test_eliminar_cliente(self):
        """ Verifica eliminación de cliente """
        Cliente.eliminar_cliente(11)  # Eliminamos al cliente con id 11
        data = GestorHoteles.leer_archivo(self.clientes_file)
        self.assertEqual(len(data), 0)

    def test_crear_reserva(self):
        """ Verifica creación de reserva """
        Reserva.crear_reserva(2, 11, 21)  # Usamos ids válidos: cliente 11 y hotel 21
        data = GestorHoteles.leer_archivo(self.reservas_file)
        self.assertEqual(len(data), 2)
        self.assertEqual(data[-1]["id_hotel"], 21)  # Confirmamos que la reserva tiene el hotel correcto

    def test_cancelar_reserva(self):
        """ Verifica cancelación de reserva """
        Reserva.cancelar_reserva(11)  # Cancelamos la reserva con id 11
        data = GestorHoteles.leer_archivo(self.reservas_file)
        self.assertEqual(len(data), 0)

if __name__ == "__main__":
    unittest.main()
